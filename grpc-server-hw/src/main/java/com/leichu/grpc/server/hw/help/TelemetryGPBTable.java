// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: huawei-telemetry.proto

package com.leichu.grpc.server.hw.help;

/**
 * <pre>
 *TelemetryGPBTable消息结构定义。
 * </pre>
 *
 * Protobuf type {@code TelemetryGPBTable}
 */
public  final class TelemetryGPBTable extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:TelemetryGPBTable)
    TelemetryGPBTableOrBuilder {
  // Use TelemetryGPBTable.newBuilder() to construct.
  private TelemetryGPBTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TelemetryGPBTable() {
    row_ = java.util.Collections.emptyList();
    delete_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private TelemetryGPBTable(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              row_ = new java.util.ArrayList<com.leichu.grpc.server.hw.help.TelemetryRowGPB>();
              mutable_bitField0_ |= 0x00000001;
            }
            row_.add(
                input.readMessage(com.leichu.grpc.server.hw.help.TelemetryRowGPB.parser(), extensionRegistry));
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              delete_ = new java.util.ArrayList<com.leichu.grpc.server.hw.help.DataPath>();
              mutable_bitField0_ |= 0x00000002;
            }
            delete_.add(
                input.readMessage(com.leichu.grpc.server.hw.help.DataPath.parser(), extensionRegistry));
            break;
          }
          case 26: {
            com.leichu.grpc.server.hw.help.Generator.Builder subBuilder = null;
            if (generator_ != null) {
              subBuilder = generator_.toBuilder();
            }
            generator_ = input.readMessage(com.leichu.grpc.server.hw.help.Generator.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(generator_);
              generator_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        row_ = java.util.Collections.unmodifiableList(row_);
      }
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        delete_ = java.util.Collections.unmodifiableList(delete_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.leichu.grpc.server.hw.help.HuaweiTelemetry.internal_static_TelemetryGPBTable_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.leichu.grpc.server.hw.help.HuaweiTelemetry.internal_static_TelemetryGPBTable_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.leichu.grpc.server.hw.help.TelemetryGPBTable.class, com.leichu.grpc.server.hw.help.TelemetryGPBTable.Builder.class);
  }

  private int bitField0_;
  public static final int ROW_FIELD_NUMBER = 1;
  private java.util.List<com.leichu.grpc.server.hw.help.TelemetryRowGPB> row_;
  /**
   * <pre>
   *数组定义，标识数据是TelemetryRowGPB结构的重复。
   * </pre>
   *
   * <code>repeated .TelemetryRowGPB row = 1;</code>
   */
  public java.util.List<com.leichu.grpc.server.hw.help.TelemetryRowGPB> getRowList() {
    return row_;
  }
  /**
   * <pre>
   *数组定义，标识数据是TelemetryRowGPB结构的重复。
   * </pre>
   *
   * <code>repeated .TelemetryRowGPB row = 1;</code>
   */
  public java.util.List<? extends com.leichu.grpc.server.hw.help.TelemetryRowGPBOrBuilder> 
      getRowOrBuilderList() {
    return row_;
  }
  /**
   * <pre>
   *数组定义，标识数据是TelemetryRowGPB结构的重复。
   * </pre>
   *
   * <code>repeated .TelemetryRowGPB row = 1;</code>
   */
  public int getRowCount() {
    return row_.size();
  }
  /**
   * <pre>
   *数组定义，标识数据是TelemetryRowGPB结构的重复。
   * </pre>
   *
   * <code>repeated .TelemetryRowGPB row = 1;</code>
   */
  public com.leichu.grpc.server.hw.help.TelemetryRowGPB getRow(int index) {
    return row_.get(index);
  }
  /**
   * <pre>
   *数组定义，标识数据是TelemetryRowGPB结构的重复。
   * </pre>
   *
   * <code>repeated .TelemetryRowGPB row = 1;</code>
   */
  public com.leichu.grpc.server.hw.help.TelemetryRowGPBOrBuilder getRowOrBuilder(
      int index) {
    return row_.get(index);
  }

  public static final int DELETE_FIELD_NUMBER = 2;
  private java.util.List<com.leichu.grpc.server.hw.help.DataPath> delete_;
  /**
   * <pre>
   *删除数据路径。
   * </pre>
   *
   * <code>repeated .DataPath delete = 2;</code>
   */
  public java.util.List<com.leichu.grpc.server.hw.help.DataPath> getDeleteList() {
    return delete_;
  }
  /**
   * <pre>
   *删除数据路径。
   * </pre>
   *
   * <code>repeated .DataPath delete = 2;</code>
   */
  public java.util.List<? extends com.leichu.grpc.server.hw.help.DataPathOrBuilder> 
      getDeleteOrBuilderList() {
    return delete_;
  }
  /**
   * <pre>
   *删除数据路径。
   * </pre>
   *
   * <code>repeated .DataPath delete = 2;</code>
   */
  public int getDeleteCount() {
    return delete_.size();
  }
  /**
   * <pre>
   *删除数据路径。
   * </pre>
   *
   * <code>repeated .DataPath delete = 2;</code>
   */
  public com.leichu.grpc.server.hw.help.DataPath getDelete(int index) {
    return delete_.get(index);
  }
  /**
   * <pre>
   *删除数据路径。
   * </pre>
   *
   * <code>repeated .DataPath delete = 2;</code>
   */
  public com.leichu.grpc.server.hw.help.DataPathOrBuilder getDeleteOrBuilder(
      int index) {
    return delete_.get(index);
  }

  public static final int GENERATOR_FIELD_NUMBER = 3;
  private com.leichu.grpc.server.hw.help.Generator generator_;
  /**
   * <pre>
   *数据源描述。用于可靠性要求较高的OnChange+业务。
   * </pre>
   *
   * <code>optional .Generator generator = 3;</code>
   */
  public boolean hasGenerator() {
    return generator_ != null;
  }
  /**
   * <pre>
   *数据源描述。用于可靠性要求较高的OnChange+业务。
   * </pre>
   *
   * <code>optional .Generator generator = 3;</code>
   */
  public com.leichu.grpc.server.hw.help.Generator getGenerator() {
    return generator_ == null ? com.leichu.grpc.server.hw.help.Generator.getDefaultInstance() : generator_;
  }
  /**
   * <pre>
   *数据源描述。用于可靠性要求较高的OnChange+业务。
   * </pre>
   *
   * <code>optional .Generator generator = 3;</code>
   */
  public com.leichu.grpc.server.hw.help.GeneratorOrBuilder getGeneratorOrBuilder() {
    return getGenerator();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < row_.size(); i++) {
      output.writeMessage(1, row_.get(i));
    }
    for (int i = 0; i < delete_.size(); i++) {
      output.writeMessage(2, delete_.get(i));
    }
    if (generator_ != null) {
      output.writeMessage(3, getGenerator());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < row_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, row_.get(i));
    }
    for (int i = 0; i < delete_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, delete_.get(i));
    }
    if (generator_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getGenerator());
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.leichu.grpc.server.hw.help.TelemetryGPBTable)) {
      return super.equals(obj);
    }
    com.leichu.grpc.server.hw.help.TelemetryGPBTable other = (com.leichu.grpc.server.hw.help.TelemetryGPBTable) obj;

    boolean result = true;
    result = result && getRowList()
        .equals(other.getRowList());
    result = result && getDeleteList()
        .equals(other.getDeleteList());
    result = result && (hasGenerator() == other.hasGenerator());
    if (hasGenerator()) {
      result = result && getGenerator()
          .equals(other.getGenerator());
    }
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    if (getRowCount() > 0) {
      hash = (37 * hash) + ROW_FIELD_NUMBER;
      hash = (53 * hash) + getRowList().hashCode();
    }
    if (getDeleteCount() > 0) {
      hash = (37 * hash) + DELETE_FIELD_NUMBER;
      hash = (53 * hash) + getDeleteList().hashCode();
    }
    if (hasGenerator()) {
      hash = (37 * hash) + GENERATOR_FIELD_NUMBER;
      hash = (53 * hash) + getGenerator().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.leichu.grpc.server.hw.help.TelemetryGPBTable parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.leichu.grpc.server.hw.help.TelemetryGPBTable parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.leichu.grpc.server.hw.help.TelemetryGPBTable parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.leichu.grpc.server.hw.help.TelemetryGPBTable parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.leichu.grpc.server.hw.help.TelemetryGPBTable parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.leichu.grpc.server.hw.help.TelemetryGPBTable parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.leichu.grpc.server.hw.help.TelemetryGPBTable parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.leichu.grpc.server.hw.help.TelemetryGPBTable parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.leichu.grpc.server.hw.help.TelemetryGPBTable parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.leichu.grpc.server.hw.help.TelemetryGPBTable parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.leichu.grpc.server.hw.help.TelemetryGPBTable prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   *TelemetryGPBTable消息结构定义。
   * </pre>
   *
   * Protobuf type {@code TelemetryGPBTable}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:TelemetryGPBTable)
      com.leichu.grpc.server.hw.help.TelemetryGPBTableOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.leichu.grpc.server.hw.help.HuaweiTelemetry.internal_static_TelemetryGPBTable_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.leichu.grpc.server.hw.help.HuaweiTelemetry.internal_static_TelemetryGPBTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.leichu.grpc.server.hw.help.TelemetryGPBTable.class, com.leichu.grpc.server.hw.help.TelemetryGPBTable.Builder.class);
    }

    // Construct using com.leichu.grpc.server.hw.help.TelemetryGPBTable.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getRowFieldBuilder();
        getDeleteFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      if (rowBuilder_ == null) {
        row_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        rowBuilder_.clear();
      }
      if (deleteBuilder_ == null) {
        delete_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        deleteBuilder_.clear();
      }
      if (generatorBuilder_ == null) {
        generator_ = null;
      } else {
        generator_ = null;
        generatorBuilder_ = null;
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.leichu.grpc.server.hw.help.HuaweiTelemetry.internal_static_TelemetryGPBTable_descriptor;
    }

    public com.leichu.grpc.server.hw.help.TelemetryGPBTable getDefaultInstanceForType() {
      return com.leichu.grpc.server.hw.help.TelemetryGPBTable.getDefaultInstance();
    }

    public com.leichu.grpc.server.hw.help.TelemetryGPBTable build() {
      com.leichu.grpc.server.hw.help.TelemetryGPBTable result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.leichu.grpc.server.hw.help.TelemetryGPBTable buildPartial() {
      com.leichu.grpc.server.hw.help.TelemetryGPBTable result = new com.leichu.grpc.server.hw.help.TelemetryGPBTable(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (rowBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          row_ = java.util.Collections.unmodifiableList(row_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.row_ = row_;
      } else {
        result.row_ = rowBuilder_.build();
      }
      if (deleteBuilder_ == null) {
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          delete_ = java.util.Collections.unmodifiableList(delete_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.delete_ = delete_;
      } else {
        result.delete_ = deleteBuilder_.build();
      }
      if (generatorBuilder_ == null) {
        result.generator_ = generator_;
      } else {
        result.generator_ = generatorBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.leichu.grpc.server.hw.help.TelemetryGPBTable) {
        return mergeFrom((com.leichu.grpc.server.hw.help.TelemetryGPBTable)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.leichu.grpc.server.hw.help.TelemetryGPBTable other) {
      if (other == com.leichu.grpc.server.hw.help.TelemetryGPBTable.getDefaultInstance()) return this;
      if (rowBuilder_ == null) {
        if (!other.row_.isEmpty()) {
          if (row_.isEmpty()) {
            row_ = other.row_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureRowIsMutable();
            row_.addAll(other.row_);
          }
          onChanged();
        }
      } else {
        if (!other.row_.isEmpty()) {
          if (rowBuilder_.isEmpty()) {
            rowBuilder_.dispose();
            rowBuilder_ = null;
            row_ = other.row_;
            bitField0_ = (bitField0_ & ~0x00000001);
            rowBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getRowFieldBuilder() : null;
          } else {
            rowBuilder_.addAllMessages(other.row_);
          }
        }
      }
      if (deleteBuilder_ == null) {
        if (!other.delete_.isEmpty()) {
          if (delete_.isEmpty()) {
            delete_ = other.delete_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureDeleteIsMutable();
            delete_.addAll(other.delete_);
          }
          onChanged();
        }
      } else {
        if (!other.delete_.isEmpty()) {
          if (deleteBuilder_.isEmpty()) {
            deleteBuilder_.dispose();
            deleteBuilder_ = null;
            delete_ = other.delete_;
            bitField0_ = (bitField0_ & ~0x00000002);
            deleteBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getDeleteFieldBuilder() : null;
          } else {
            deleteBuilder_.addAllMessages(other.delete_);
          }
        }
      }
      if (other.hasGenerator()) {
        mergeGenerator(other.getGenerator());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.leichu.grpc.server.hw.help.TelemetryGPBTable parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.leichu.grpc.server.hw.help.TelemetryGPBTable) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.leichu.grpc.server.hw.help.TelemetryRowGPB> row_ =
      java.util.Collections.emptyList();
    private void ensureRowIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        row_ = new java.util.ArrayList<com.leichu.grpc.server.hw.help.TelemetryRowGPB>(row_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.leichu.grpc.server.hw.help.TelemetryRowGPB, com.leichu.grpc.server.hw.help.TelemetryRowGPB.Builder, com.leichu.grpc.server.hw.help.TelemetryRowGPBOrBuilder> rowBuilder_;

    /**
     * <pre>
     *数组定义，标识数据是TelemetryRowGPB结构的重复。
     * </pre>
     *
     * <code>repeated .TelemetryRowGPB row = 1;</code>
     */
    public java.util.List<com.leichu.grpc.server.hw.help.TelemetryRowGPB> getRowList() {
      if (rowBuilder_ == null) {
        return java.util.Collections.unmodifiableList(row_);
      } else {
        return rowBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     *数组定义，标识数据是TelemetryRowGPB结构的重复。
     * </pre>
     *
     * <code>repeated .TelemetryRowGPB row = 1;</code>
     */
    public int getRowCount() {
      if (rowBuilder_ == null) {
        return row_.size();
      } else {
        return rowBuilder_.getCount();
      }
    }
    /**
     * <pre>
     *数组定义，标识数据是TelemetryRowGPB结构的重复。
     * </pre>
     *
     * <code>repeated .TelemetryRowGPB row = 1;</code>
     */
    public com.leichu.grpc.server.hw.help.TelemetryRowGPB getRow(int index) {
      if (rowBuilder_ == null) {
        return row_.get(index);
      } else {
        return rowBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     *数组定义，标识数据是TelemetryRowGPB结构的重复。
     * </pre>
     *
     * <code>repeated .TelemetryRowGPB row = 1;</code>
     */
    public Builder setRow(
        int index, com.leichu.grpc.server.hw.help.TelemetryRowGPB value) {
      if (rowBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRowIsMutable();
        row_.set(index, value);
        onChanged();
      } else {
        rowBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     *数组定义，标识数据是TelemetryRowGPB结构的重复。
     * </pre>
     *
     * <code>repeated .TelemetryRowGPB row = 1;</code>
     */
    public Builder setRow(
        int index, com.leichu.grpc.server.hw.help.TelemetryRowGPB.Builder builderForValue) {
      if (rowBuilder_ == null) {
        ensureRowIsMutable();
        row_.set(index, builderForValue.build());
        onChanged();
      } else {
        rowBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     *数组定义，标识数据是TelemetryRowGPB结构的重复。
     * </pre>
     *
     * <code>repeated .TelemetryRowGPB row = 1;</code>
     */
    public Builder addRow(com.leichu.grpc.server.hw.help.TelemetryRowGPB value) {
      if (rowBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRowIsMutable();
        row_.add(value);
        onChanged();
      } else {
        rowBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     *数组定义，标识数据是TelemetryRowGPB结构的重复。
     * </pre>
     *
     * <code>repeated .TelemetryRowGPB row = 1;</code>
     */
    public Builder addRow(
        int index, com.leichu.grpc.server.hw.help.TelemetryRowGPB value) {
      if (rowBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRowIsMutable();
        row_.add(index, value);
        onChanged();
      } else {
        rowBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     *数组定义，标识数据是TelemetryRowGPB结构的重复。
     * </pre>
     *
     * <code>repeated .TelemetryRowGPB row = 1;</code>
     */
    public Builder addRow(
        com.leichu.grpc.server.hw.help.TelemetryRowGPB.Builder builderForValue) {
      if (rowBuilder_ == null) {
        ensureRowIsMutable();
        row_.add(builderForValue.build());
        onChanged();
      } else {
        rowBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     *数组定义，标识数据是TelemetryRowGPB结构的重复。
     * </pre>
     *
     * <code>repeated .TelemetryRowGPB row = 1;</code>
     */
    public Builder addRow(
        int index, com.leichu.grpc.server.hw.help.TelemetryRowGPB.Builder builderForValue) {
      if (rowBuilder_ == null) {
        ensureRowIsMutable();
        row_.add(index, builderForValue.build());
        onChanged();
      } else {
        rowBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     *数组定义，标识数据是TelemetryRowGPB结构的重复。
     * </pre>
     *
     * <code>repeated .TelemetryRowGPB row = 1;</code>
     */
    public Builder addAllRow(
        java.lang.Iterable<? extends com.leichu.grpc.server.hw.help.TelemetryRowGPB> values) {
      if (rowBuilder_ == null) {
        ensureRowIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, row_);
        onChanged();
      } else {
        rowBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     *数组定义，标识数据是TelemetryRowGPB结构的重复。
     * </pre>
     *
     * <code>repeated .TelemetryRowGPB row = 1;</code>
     */
    public Builder clearRow() {
      if (rowBuilder_ == null) {
        row_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        rowBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     *数组定义，标识数据是TelemetryRowGPB结构的重复。
     * </pre>
     *
     * <code>repeated .TelemetryRowGPB row = 1;</code>
     */
    public Builder removeRow(int index) {
      if (rowBuilder_ == null) {
        ensureRowIsMutable();
        row_.remove(index);
        onChanged();
      } else {
        rowBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     *数组定义，标识数据是TelemetryRowGPB结构的重复。
     * </pre>
     *
     * <code>repeated .TelemetryRowGPB row = 1;</code>
     */
    public com.leichu.grpc.server.hw.help.TelemetryRowGPB.Builder getRowBuilder(
        int index) {
      return getRowFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     *数组定义，标识数据是TelemetryRowGPB结构的重复。
     * </pre>
     *
     * <code>repeated .TelemetryRowGPB row = 1;</code>
     */
    public com.leichu.grpc.server.hw.help.TelemetryRowGPBOrBuilder getRowOrBuilder(
        int index) {
      if (rowBuilder_ == null) {
        return row_.get(index);  } else {
        return rowBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     *数组定义，标识数据是TelemetryRowGPB结构的重复。
     * </pre>
     *
     * <code>repeated .TelemetryRowGPB row = 1;</code>
     */
    public java.util.List<? extends com.leichu.grpc.server.hw.help.TelemetryRowGPBOrBuilder> 
         getRowOrBuilderList() {
      if (rowBuilder_ != null) {
        return rowBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(row_);
      }
    }
    /**
     * <pre>
     *数组定义，标识数据是TelemetryRowGPB结构的重复。
     * </pre>
     *
     * <code>repeated .TelemetryRowGPB row = 1;</code>
     */
    public com.leichu.grpc.server.hw.help.TelemetryRowGPB.Builder addRowBuilder() {
      return getRowFieldBuilder().addBuilder(
          com.leichu.grpc.server.hw.help.TelemetryRowGPB.getDefaultInstance());
    }
    /**
     * <pre>
     *数组定义，标识数据是TelemetryRowGPB结构的重复。
     * </pre>
     *
     * <code>repeated .TelemetryRowGPB row = 1;</code>
     */
    public com.leichu.grpc.server.hw.help.TelemetryRowGPB.Builder addRowBuilder(
        int index) {
      return getRowFieldBuilder().addBuilder(
          index, com.leichu.grpc.server.hw.help.TelemetryRowGPB.getDefaultInstance());
    }
    /**
     * <pre>
     *数组定义，标识数据是TelemetryRowGPB结构的重复。
     * </pre>
     *
     * <code>repeated .TelemetryRowGPB row = 1;</code>
     */
    public java.util.List<com.leichu.grpc.server.hw.help.TelemetryRowGPB.Builder> 
         getRowBuilderList() {
      return getRowFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.leichu.grpc.server.hw.help.TelemetryRowGPB, com.leichu.grpc.server.hw.help.TelemetryRowGPB.Builder, com.leichu.grpc.server.hw.help.TelemetryRowGPBOrBuilder> 
        getRowFieldBuilder() {
      if (rowBuilder_ == null) {
        rowBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.leichu.grpc.server.hw.help.TelemetryRowGPB, com.leichu.grpc.server.hw.help.TelemetryRowGPB.Builder, com.leichu.grpc.server.hw.help.TelemetryRowGPBOrBuilder>(
                row_,
                ((bitField0_ & 0x00000001) == 0x00000001),
                getParentForChildren(),
                isClean());
        row_ = null;
      }
      return rowBuilder_;
    }

    private java.util.List<com.leichu.grpc.server.hw.help.DataPath> delete_ =
      java.util.Collections.emptyList();
    private void ensureDeleteIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        delete_ = new java.util.ArrayList<com.leichu.grpc.server.hw.help.DataPath>(delete_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.leichu.grpc.server.hw.help.DataPath, com.leichu.grpc.server.hw.help.DataPath.Builder, com.leichu.grpc.server.hw.help.DataPathOrBuilder> deleteBuilder_;

    /**
     * <pre>
     *删除数据路径。
     * </pre>
     *
     * <code>repeated .DataPath delete = 2;</code>
     */
    public java.util.List<com.leichu.grpc.server.hw.help.DataPath> getDeleteList() {
      if (deleteBuilder_ == null) {
        return java.util.Collections.unmodifiableList(delete_);
      } else {
        return deleteBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     *删除数据路径。
     * </pre>
     *
     * <code>repeated .DataPath delete = 2;</code>
     */
    public int getDeleteCount() {
      if (deleteBuilder_ == null) {
        return delete_.size();
      } else {
        return deleteBuilder_.getCount();
      }
    }
    /**
     * <pre>
     *删除数据路径。
     * </pre>
     *
     * <code>repeated .DataPath delete = 2;</code>
     */
    public com.leichu.grpc.server.hw.help.DataPath getDelete(int index) {
      if (deleteBuilder_ == null) {
        return delete_.get(index);
      } else {
        return deleteBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     *删除数据路径。
     * </pre>
     *
     * <code>repeated .DataPath delete = 2;</code>
     */
    public Builder setDelete(
        int index, com.leichu.grpc.server.hw.help.DataPath value) {
      if (deleteBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDeleteIsMutable();
        delete_.set(index, value);
        onChanged();
      } else {
        deleteBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     *删除数据路径。
     * </pre>
     *
     * <code>repeated .DataPath delete = 2;</code>
     */
    public Builder setDelete(
        int index, com.leichu.grpc.server.hw.help.DataPath.Builder builderForValue) {
      if (deleteBuilder_ == null) {
        ensureDeleteIsMutable();
        delete_.set(index, builderForValue.build());
        onChanged();
      } else {
        deleteBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     *删除数据路径。
     * </pre>
     *
     * <code>repeated .DataPath delete = 2;</code>
     */
    public Builder addDelete(com.leichu.grpc.server.hw.help.DataPath value) {
      if (deleteBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDeleteIsMutable();
        delete_.add(value);
        onChanged();
      } else {
        deleteBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     *删除数据路径。
     * </pre>
     *
     * <code>repeated .DataPath delete = 2;</code>
     */
    public Builder addDelete(
        int index, com.leichu.grpc.server.hw.help.DataPath value) {
      if (deleteBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDeleteIsMutable();
        delete_.add(index, value);
        onChanged();
      } else {
        deleteBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     *删除数据路径。
     * </pre>
     *
     * <code>repeated .DataPath delete = 2;</code>
     */
    public Builder addDelete(
        com.leichu.grpc.server.hw.help.DataPath.Builder builderForValue) {
      if (deleteBuilder_ == null) {
        ensureDeleteIsMutable();
        delete_.add(builderForValue.build());
        onChanged();
      } else {
        deleteBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     *删除数据路径。
     * </pre>
     *
     * <code>repeated .DataPath delete = 2;</code>
     */
    public Builder addDelete(
        int index, com.leichu.grpc.server.hw.help.DataPath.Builder builderForValue) {
      if (deleteBuilder_ == null) {
        ensureDeleteIsMutable();
        delete_.add(index, builderForValue.build());
        onChanged();
      } else {
        deleteBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     *删除数据路径。
     * </pre>
     *
     * <code>repeated .DataPath delete = 2;</code>
     */
    public Builder addAllDelete(
        java.lang.Iterable<? extends com.leichu.grpc.server.hw.help.DataPath> values) {
      if (deleteBuilder_ == null) {
        ensureDeleteIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, delete_);
        onChanged();
      } else {
        deleteBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     *删除数据路径。
     * </pre>
     *
     * <code>repeated .DataPath delete = 2;</code>
     */
    public Builder clearDelete() {
      if (deleteBuilder_ == null) {
        delete_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        deleteBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     *删除数据路径。
     * </pre>
     *
     * <code>repeated .DataPath delete = 2;</code>
     */
    public Builder removeDelete(int index) {
      if (deleteBuilder_ == null) {
        ensureDeleteIsMutable();
        delete_.remove(index);
        onChanged();
      } else {
        deleteBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     *删除数据路径。
     * </pre>
     *
     * <code>repeated .DataPath delete = 2;</code>
     */
    public com.leichu.grpc.server.hw.help.DataPath.Builder getDeleteBuilder(
        int index) {
      return getDeleteFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     *删除数据路径。
     * </pre>
     *
     * <code>repeated .DataPath delete = 2;</code>
     */
    public com.leichu.grpc.server.hw.help.DataPathOrBuilder getDeleteOrBuilder(
        int index) {
      if (deleteBuilder_ == null) {
        return delete_.get(index);  } else {
        return deleteBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     *删除数据路径。
     * </pre>
     *
     * <code>repeated .DataPath delete = 2;</code>
     */
    public java.util.List<? extends com.leichu.grpc.server.hw.help.DataPathOrBuilder> 
         getDeleteOrBuilderList() {
      if (deleteBuilder_ != null) {
        return deleteBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(delete_);
      }
    }
    /**
     * <pre>
     *删除数据路径。
     * </pre>
     *
     * <code>repeated .DataPath delete = 2;</code>
     */
    public com.leichu.grpc.server.hw.help.DataPath.Builder addDeleteBuilder() {
      return getDeleteFieldBuilder().addBuilder(
          com.leichu.grpc.server.hw.help.DataPath.getDefaultInstance());
    }
    /**
     * <pre>
     *删除数据路径。
     * </pre>
     *
     * <code>repeated .DataPath delete = 2;</code>
     */
    public com.leichu.grpc.server.hw.help.DataPath.Builder addDeleteBuilder(
        int index) {
      return getDeleteFieldBuilder().addBuilder(
          index, com.leichu.grpc.server.hw.help.DataPath.getDefaultInstance());
    }
    /**
     * <pre>
     *删除数据路径。
     * </pre>
     *
     * <code>repeated .DataPath delete = 2;</code>
     */
    public java.util.List<com.leichu.grpc.server.hw.help.DataPath.Builder> 
         getDeleteBuilderList() {
      return getDeleteFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.leichu.grpc.server.hw.help.DataPath, com.leichu.grpc.server.hw.help.DataPath.Builder, com.leichu.grpc.server.hw.help.DataPathOrBuilder> 
        getDeleteFieldBuilder() {
      if (deleteBuilder_ == null) {
        deleteBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.leichu.grpc.server.hw.help.DataPath, com.leichu.grpc.server.hw.help.DataPath.Builder, com.leichu.grpc.server.hw.help.DataPathOrBuilder>(
                delete_,
                ((bitField0_ & 0x00000002) == 0x00000002),
                getParentForChildren(),
                isClean());
        delete_ = null;
      }
      return deleteBuilder_;
    }

    private com.leichu.grpc.server.hw.help.Generator generator_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.leichu.grpc.server.hw.help.Generator, com.leichu.grpc.server.hw.help.Generator.Builder, com.leichu.grpc.server.hw.help.GeneratorOrBuilder> generatorBuilder_;
    /**
     * <pre>
     *数据源描述。用于可靠性要求较高的OnChange+业务。
     * </pre>
     *
     * <code>optional .Generator generator = 3;</code>
     */
    public boolean hasGenerator() {
      return generatorBuilder_ != null || generator_ != null;
    }
    /**
     * <pre>
     *数据源描述。用于可靠性要求较高的OnChange+业务。
     * </pre>
     *
     * <code>optional .Generator generator = 3;</code>
     */
    public com.leichu.grpc.server.hw.help.Generator getGenerator() {
      if (generatorBuilder_ == null) {
        return generator_ == null ? com.leichu.grpc.server.hw.help.Generator.getDefaultInstance() : generator_;
      } else {
        return generatorBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     *数据源描述。用于可靠性要求较高的OnChange+业务。
     * </pre>
     *
     * <code>optional .Generator generator = 3;</code>
     */
    public Builder setGenerator(com.leichu.grpc.server.hw.help.Generator value) {
      if (generatorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        generator_ = value;
        onChanged();
      } else {
        generatorBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     *数据源描述。用于可靠性要求较高的OnChange+业务。
     * </pre>
     *
     * <code>optional .Generator generator = 3;</code>
     */
    public Builder setGenerator(
        com.leichu.grpc.server.hw.help.Generator.Builder builderForValue) {
      if (generatorBuilder_ == null) {
        generator_ = builderForValue.build();
        onChanged();
      } else {
        generatorBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     *数据源描述。用于可靠性要求较高的OnChange+业务。
     * </pre>
     *
     * <code>optional .Generator generator = 3;</code>
     */
    public Builder mergeGenerator(com.leichu.grpc.server.hw.help.Generator value) {
      if (generatorBuilder_ == null) {
        if (generator_ != null) {
          generator_ =
            com.leichu.grpc.server.hw.help.Generator.newBuilder(generator_).mergeFrom(value).buildPartial();
        } else {
          generator_ = value;
        }
        onChanged();
      } else {
        generatorBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     *数据源描述。用于可靠性要求较高的OnChange+业务。
     * </pre>
     *
     * <code>optional .Generator generator = 3;</code>
     */
    public Builder clearGenerator() {
      if (generatorBuilder_ == null) {
        generator_ = null;
        onChanged();
      } else {
        generator_ = null;
        generatorBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     *数据源描述。用于可靠性要求较高的OnChange+业务。
     * </pre>
     *
     * <code>optional .Generator generator = 3;</code>
     */
    public com.leichu.grpc.server.hw.help.Generator.Builder getGeneratorBuilder() {
      
      onChanged();
      return getGeneratorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     *数据源描述。用于可靠性要求较高的OnChange+业务。
     * </pre>
     *
     * <code>optional .Generator generator = 3;</code>
     */
    public com.leichu.grpc.server.hw.help.GeneratorOrBuilder getGeneratorOrBuilder() {
      if (generatorBuilder_ != null) {
        return generatorBuilder_.getMessageOrBuilder();
      } else {
        return generator_ == null ?
            com.leichu.grpc.server.hw.help.Generator.getDefaultInstance() : generator_;
      }
    }
    /**
     * <pre>
     *数据源描述。用于可靠性要求较高的OnChange+业务。
     * </pre>
     *
     * <code>optional .Generator generator = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.leichu.grpc.server.hw.help.Generator, com.leichu.grpc.server.hw.help.Generator.Builder, com.leichu.grpc.server.hw.help.GeneratorOrBuilder> 
        getGeneratorFieldBuilder() {
      if (generatorBuilder_ == null) {
        generatorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.leichu.grpc.server.hw.help.Generator, com.leichu.grpc.server.hw.help.Generator.Builder, com.leichu.grpc.server.hw.help.GeneratorOrBuilder>(
                getGenerator(),
                getParentForChildren(),
                isClean());
        generator_ = null;
      }
      return generatorBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:TelemetryGPBTable)
  }

  // @@protoc_insertion_point(class_scope:TelemetryGPBTable)
  private static final com.leichu.grpc.server.hw.help.TelemetryGPBTable DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.leichu.grpc.server.hw.help.TelemetryGPBTable();
  }

  public static com.leichu.grpc.server.hw.help.TelemetryGPBTable getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TelemetryGPBTable>
      PARSER = new com.google.protobuf.AbstractParser<TelemetryGPBTable>() {
    public TelemetryGPBTable parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new TelemetryGPBTable(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<TelemetryGPBTable> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TelemetryGPBTable> getParserForType() {
    return PARSER;
  }

  public com.leichu.grpc.server.hw.help.TelemetryGPBTable getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

